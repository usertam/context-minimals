name: "Update"
on:
  workflow_dispatch:
  push:
    branches:
    - master
  schedule:
  - cron: '0 0 * * *'
jobs:
  update-deps:
    name: Update dependencies
    runs-on: ubuntu-latest
    outputs:
      rebuild: ${{ steps.update.outputs.REBUILD }}
      ctx: ${{ steps.versions.outputs.ctx }}
      lmx: ${{ steps.versions.outputs.lmx }}
      ltx: ${{ steps.versions.outputs.ltx }}
    steps:
    - uses: actions/checkout@v3
    - name: Set up github-actions name and email
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    - uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=https://github.com/NixOS/nixpkgs/archive/nixpkgs-unstable.tar.gz
    - name: Checkout modules branch
      run: |
        git fetch --depth=1 origin mirror/modules:mirror/modules || true
        git symbolic-ref HEAD refs/heads/mirror/modules
        git reset --hard
    - name: Sync with upstream modules
      run: |
        rsync -av rsync://contextgarden.net/minimals/current/modules/* .
    - name: Commit and push if modules changes present
      run: |
        if [ -z "$(git status --porcelain)" ]; then
          echo "No modules changes present."
        else
          echo "Modules changes present."
          git add .
          git commit --allow-empty-message -m ""
          git push origin mirror/modules
        fi
    - name: Checkout current branch
      run: |
        git switch "${GITHUB_REF##*/}"
    - name: Update flake lock file
      id: update
      run: |
        # only update nixpkgs if others dependencies are updated
        nix flake metadata --update-input context --update-input luatex --update-input context-modules
        if git status --porcelain | grep flake.lock; then
          echo "REBUILD=1" >> "$GITHUB_OUTPUT"
          nix flake update
        fi
    - name: Refresh derivation versions
      id: versions
      run: |
        # context-minimals
        nix eval --raw --apply 'v: "ctx=${v}\n"' .#context-minimals.src.computedVersion >> "$GITHUB_OUTPUT"
        # luametatex
        nix eval --raw --apply 'v: "lmx=${v}\n"' .#luametatex.computedVersion >> "$GITHUB_OUTPUT"
        # luatex
        nix eval --raw --apply 'v: "ltx=${v}\n"' .#luatex.computedVersion >> "$GITHUB_OUTPUT"
    - name: Upload lock file artifact
      if: steps.update.outputs.REBUILD || github.event_name != 'schedule'
      uses: actions/upload-artifact@v3
      with:
        name: flake.lock
        path: flake.lock

  build:
    name: Build
    needs: update-deps
    if: needs.update-deps.outputs.rebuild || github.event_name != 'schedule'
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=https://github.com/NixOS/nixpkgs/archive/nixpkgs-unstable.tar.gz
    - uses: cachix/cachix-action@v12
      with:
        name: context-minimals
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - name: Download lock file artifact
      uses: actions/download-artifact@v3
      with:
        name: flake.lock
    - name: Update default.nix versions
      run: |
        sed -i.orig 's/version = ".*"/version = "${{ needs.update-deps.outputs.ctx }}"/' default.nix
        sed -i.orig 's/version = ".*"/version = "${{ needs.update-deps.outputs.lmx }}"/' pkgs/luametatex/default.nix
        sed -i.orig 's/version = ".*"/version = "${{ needs.update-deps.outputs.ltx }}"/' pkgs/luatex/default.nix
        git clean -xfd
    - name: Build and enforce determinism
      run: |
        for ATTR in luametatex luatex context-minimals.src context-minimals; do
          nix build ".#$ATTR"
          nix build --rebuild ".#$ATTR"
        done
    - name: Test basic compilation
      run: |
        echo '\input khatt-en' > test.tex
        nix run . test.tex && [ -f test.pdf ]

  release:
    name: Release
    needs: [ update-deps, build ]
    if: needs.update-deps.outputs.rebuild || github.event_name != 'schedule'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up github-actions name and email
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    - name: Download lock file artifact
      uses: actions/download-artifact@v3
      with:
        name: flake.lock
    - name: Update default.nix versions
      run: |
        sed -i.orig 's/version = ".*"/version = "${{ needs.update-deps.outputs.ctx }}"/' default.nix
        sed -i.orig 's/version = ".*"/version = "${{ needs.update-deps.outputs.lmx }}"/' pkgs/luametatex/default.nix
        sed -i.orig 's/version = ".*"/version = "${{ needs.update-deps.outputs.ltx }}"/' pkgs/luatex/default.nix
        git clean -xfd
    - name: Commit and push if upstream changes present
      run: |
        if [ -z "$(git status --porcelain)" ]; then
          echo "No upstream changes present."
        else
          echo "Upstream changes present."
          git add flake.lock default.nix pkgs/luametatex/default.nix pkgs/luatex/default.nix
          git commit -m "context-minimals: ${{ needs.update-deps.outputs.ctx }}"
          git push origin "${GITHUB_REF##*/}"
        fi
