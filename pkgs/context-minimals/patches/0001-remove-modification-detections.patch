From c69f743d45fdf2b000d205473dd0d12cfd1e11cb Mon Sep 17 00:00:00 2001
From: usertam <heiyiutam@gmail.com>
Date: Wed, 21 Dec 2022 16:40:04 +0800
Subject: [PATCH 1/4] remove modification detections

In a pure environment, caches are always reproducible and correct.
Hence, outdated caches are perfectly fine, rendering timestamp-based
detections and cache regeneration redundant. To avoid constant
rebuilding of font caches, remove the detection routines altogether.
---
 scripts/context/lua/mtxrun.lua                | 29 +--------
 tex/context/base/mkiv/data-sch.lua            |  2 +-
 tex/context/base/mkiv/font-one.lua            |  7 +--
 tex/context/base/mkiv/font-otl.lua            | 14 +----
 tex/context/base/mkiv/font-otr.lua            | 13 ----
 tex/context/base/mkiv/font-shp.lua            | 16 ++---
 tex/context/base/mkiv/font-syn.lua            | 25 +++-----
 tex/context/base/mkiv/grph-inc.lua            | 15 +----
 tex/context/base/mkiv/l-file.lua              |  4 --
 tex/context/base/mkiv/l-md5.lua               | 25 +-------
 tex/context/base/mkiv/meta-fnt.lua            |  4 +-
 tex/context/base/mkxl/font-one.lmt            |  7 +--
 tex/context/base/mkxl/font-otl.lmt            | 14 +----
 tex/context/base/mkxl/grph-inc.lmt            | 15 +----
 .../context/luatex/luatex-fonts-merged.lua    | 60 ++++---------------
 15 files changed, 44 insertions(+), 206 deletions(-)

diff --git a/scripts/context/lua/mtxrun.lua b/scripts/context/lua/mtxrun.lua
index 41eddd4d..365c05a6 100644
--- a/scripts/context/lua/mtxrun.lua
+++ b/scripts/context/lua/mtxrun.lua
@@ -4421,9 +4421,6 @@ function lfs.isfound(name)
   return (a=="file" or a=="link") and name or nil
  end
 end
-function lfs.modification(name)
- return name and attributes(name,"modification") or nil
-end
 if sandbox then
  sandbox.redefine(lfs.isfile,"lfs.isfile")
  sandbox.redefine(lfs.isdir,"lfs.isdir")
@@ -4850,7 +4847,7 @@ if not md5 then
 end
 local md5,file=md5,file
 local gsub=string.gsub
-local modification,isfile,touch=lfs.modification,lfs.isfile,lfs.touch
+local isfile,touch=lfs.isfile,lfs.touch
 local loaddata,savedata=io.loaddata,io.savedata
 do
  local patterns=lpeg and lpeg.patterns
@@ -4869,29 +4866,9 @@ do
 end
 local md5HEX=md5.HEX
 function file.needsupdating(oldname,newname,threshold) 
- local oldtime=modification(oldname)
- if oldtime then
-  local newtime=modification(newname)
-  if not newtime then
-   return true 
-  elseif newtime>=oldtime then
-   return false 
-  elseif oldtime-newtime<(threshold or 1) then
-   return false 
-  else
-   return true 
-  end
- else
-  return false 
- end
+ return false
 end
 file.needs_updating=file.needsupdating
-function file.syncmtimes(oldname,newname)
- local oldtime=modification(oldname)
- if oldtime and isfile(newname) then
-  touch(newname,oldtime,oldtime)
- end
-end
 local function checksum(name)
  if md5 then
   local data=loaddata(name)
@@ -25600,7 +25577,7 @@ local function fetch(specification)
  local cachename=caches.setfirstwritablefile(cleanname,"schemes")
  if not cached[original] then
   statistics.starttiming(schemes)
-  if not io.exists(cachename) or (os.difftime(os.time(),lfs.attributes(cachename).modification)>(thresholds[protocol] or threshold)) then
+  if not io.exists(cachename) then
    cached[original]=cachename
    local handler=handlers[scheme]
    if handler then
diff --git a/tex/context/base/mkiv/data-sch.lua b/tex/context/base/mkiv/data-sch.lua
index d869520b..71ae0e6d 100644
--- a/tex/context/base/mkiv/data-sch.lua
+++ b/tex/context/base/mkiv/data-sch.lua
@@ -91,7 +91,7 @@ local function fetch(specification)
     local cachename = caches.setfirstwritablefile(cleanname,"schemes")
     if not cached[original] then
         statistics.starttiming(schemes)
-        if not io.exists(cachename) or (os.difftime(os.time(),lfs.attributes(cachename).modification) > (thresholds[protocol] or threshold)) then
+        if not io.exists(cachename) then
             cached[original] = cachename
             local handler = handlers[scheme]
             if handler then
diff --git a/tex/context/base/mkiv/font-one.lua b/tex/context/base/mkiv/font-one.lua
index 0434ab9e..a9d37354 100644
--- a/tex/context/base/mkiv/font-one.lua
+++ b/tex/context/base/mkiv/font-one.lua
@@ -84,7 +84,6 @@ function afm.load(filename)
         local data = containers.read(afm.cache,name)
         local attr = lfs.attributes(filename)
         local size = attr and attr.size or 0
-        local time = attr and attr.modification or 0
         --
         local pfbfile = file.replacesuffix(name,"pfb")
         local pfbname = resolvers.findfile(pfbfile,"pfb") or ""
@@ -92,13 +91,11 @@ function afm.load(filename)
             pfbname = resolvers.findfile(file.basename(pfbfile),"pfb") or ""
         end
         local pfbsize = 0
-        local pfbtime = 0
         if pfbname ~= "" then
             local attr = lfs.attributes(pfbname)
             pfbsize = attr.size or 0
-            pfbtime = attr.modification or 0
         end
-        if not data or data.size ~= size or data.time ~= time or data.pfbsize ~= pfbsize or data.pfbtime ~= pfbtime then
+        if not data or data.size ~= size or data.pfbsize ~= pfbsize then
             report_afm("reading %a",filename)
             data = afm.readers.loadfont(filename,pfbname)
             if data then
@@ -109,9 +106,7 @@ function afm.load(filename)
              -- otfreaders.extend(data)
                 otfreaders.pack(data)
                 data.size = size
-                data.time = time
                 data.pfbsize = pfbsize
-                data.pfbtime = pfbtime
                 report_afm("saving %a in cache",name)
              -- data.resources.unicodes = nil -- consistent with otf but here we save not much
                 data = containers.write(afm.cache, name, data)
diff --git a/tex/context/base/mkiv/font-otl.lua b/tex/context/base/mkiv/font-otl.lua
index 380d21d0..dd3fb32a 100644
--- a/tex/context/base/mkiv/font-otl.lua
+++ b/tex/context/base/mkiv/font-otl.lua
@@ -134,7 +134,6 @@ function otf.load(filename,sub,instance)
     local name = file.removesuffix(base) -- already no suffix
     local attr = lfs.attributes(filename)
     local size = attr and attr.size or 0
-    local time = attr and attr.modification or 0
     -- sub can be number of string
     if sub == "" then
         sub = false
@@ -148,7 +147,7 @@ function otf.load(filename,sub,instance)
     end
     hash = containers.cleanname(hash)
     local data = containers.read(otf.cache,hash)
-    local reload = not data or data.size ~= size or data.time ~= time or data.tableversion ~= otfreaders.tableversion
+    local reload = not data or data.size ~= size or data.tableversion ~= otfreaders.tableversion
     if forceload then
         report_otf("forced reload of %a due to hard coded flag",filename)
         reload = true
@@ -170,15 +169,12 @@ function otf.load(filename,sub,instance)
             if svgshapes then
                 resources.svgshapes = nil
                 if otf.svgenabled then
-                    local timestamp = os.date()
                     -- work in progress ... a bit boring to do
                     containers.write(otf.svgcache,hash, {
                         svgshapes = svgshapes,
-                        timestamp = timestamp,
                     })
                     data.properties.svg = {
                         hash      = hash,
-                        timestamp = timestamp,
                     }
                 end
                 if cleanup > 1 then
@@ -190,15 +186,12 @@ function otf.load(filename,sub,instance)
             if pngshapes then
                 resources.pngshapes = nil
                 if otf.pngenabled then
-                    local timestamp = os.date()
                     -- work in progress ... a bit boring to do
                     containers.write(otf.pngcache,hash, {
                         pngshapes = pngshapes,
-                        timestamp = timestamp,
                     })
                     data.properties.png = {
                         hash      = hash,
-                        timestamp = timestamp,
                     }
                 end
                 if cleanup > 1 then
@@ -613,14 +606,13 @@ local function checkconversion(specification)
         local name = file.removesuffix(base)
         local attr = lfs.attributes(filename)
         local size = attr and attr.size or 0
-        local time = attr and attr.modification or 0
         if size > 0 then
             local cleanname = containers.cleanname(name)
             local cachename = caches.setfirstwritablefile(cleanname,converter.cachename)
-            if not io.exists(cachename) or (time ~= lfs.attributes(cachename).modification) then
+            if not io.exists(cachename) then
                 report_otf("caching font %a in %a",filename,cachename)
                 converter.action(filename,cachename) -- todo infoonly
-                lfs.touch(cachename,time,time)
+                lfs.touch(cachename,0,0)
             end
             specification.filename = cachename
         end
diff --git a/tex/context/base/mkiv/font-otr.lua b/tex/context/base/mkiv/font-otr.lua
index 9f63959d..b528ec28 100644
--- a/tex/context/base/mkiv/font-otr.lua
+++ b/tex/context/base/mkiv/font-otr.lua
@@ -165,11 +165,6 @@ end)
 -- date represented in number of seconds since 12:00 midnight, January 1, 1904. The value is represented as a
 -- signed 64-bit integer
 
-local function readlongdatetime(f)
-    local a, b, c, d, e, f, g, h = readbytes(f,8)
-    return 0x100000000 * d + 0x1000000 * e + 0x10000 * f + 0x100 * g + h
-end
-
 local tableversion    = 0.004
 readers.tableversion  = tableversion
 local privateoffset   = fonts.constructors and fonts.constructors.privateoffset or 0xF0000 -- 0x10FFFF
@@ -1045,8 +1040,6 @@ readers.head = function(f,fontdata)
             magic             = readulong(f),
             flags             = readushort(f),
             units             = readushort(f),
-            created           = readlongdatetime(f),
-            modified          = readlongdatetime(f),
             xmin              = readshort(f),
             ymin              = readshort(f),
             xmax              = readshort(f),
@@ -2037,11 +2030,9 @@ local function loadtables(f,specification,offset)
     local tables   = { }
     local basename = file.basename(specification.filename)
     local filesize = specification.filesize
-    local filetime = specification.filetime
     local fontdata = { -- some can/will go
         filename      = basename,
         filesize      = filesize,
-        filetime      = filetime,
         version       = readstring(f,4),
         noftables     = readushort(f),
         searchrange   = readushort(f), -- not needed
@@ -2247,7 +2238,6 @@ local function loadfontdata(specification)
     local filename = specification.filename
     local fileattr = lfs.attributes(filename)
     local filesize = fileattr and fileattr.size or 0
-    local filetime = fileattr and fileattr.modification or 0
     local f = openfile(filename,true) -- zero based
     if not f then
         report("unable to open %a",filename)
@@ -2256,7 +2246,6 @@ local function loadfontdata(specification)
         closefile(f)
     else
         specification.filesize = filesize
-        specification.filetime = filetime
         local version  = readstring(f,4)
         local fontdata = nil
         if version == "OTTO" or version == "true" or version == "\0\1\0\0" then
@@ -2292,7 +2281,6 @@ local function loadfontdata(specification)
                     fontdata = {
                         filename    = filename,
                         filesize    = filesize,
-                        filetime    = filetime,
                         version     = version,
                         subfonts    = subfonts,
                         ttcversion  = ttcversion,
@@ -2420,7 +2408,6 @@ function readers.loadfont(filename,n,instance)
             tableversion  = tableversion,
             creator       = "context mkiv",
             size          = fontdata.filesize,
-            time          = fontdata.filetime,
             glyphs        = fontdata.glyphs,
             descriptions  = fontdata.descriptions,
             format        = fontdata.format,
diff --git a/tex/context/base/mkiv/font-shp.lua b/tex/context/base/mkiv/font-shp.lua
index 197a3f1c..9113bdbf 100644
--- a/tex/context/base/mkiv/font-shp.lua
+++ b/tex/context/base/mkiv/font-shp.lua
@@ -167,7 +167,6 @@ local function loadoutlines(cache,filename,sub,instance)
     local kind = file.suffix(filename)
     local attr = lfs.attributes(filename)
     local size = attr and attr.size or 0
-    local time = attr and attr.modification or 0
     local sub  = tonumber(sub)
 
     -- fonts.formats
@@ -175,12 +174,11 @@ local function loadoutlines(cache,filename,sub,instance)
     if size > 0 and (kind == "otf" or kind == "ttf" or kind == "tcc") then
         local hash = makehash(filename,sub,instance)
         data = containers.read(cache,hash)
-        if not data or data.time ~= time or data.size  ~= size then
+        if not data or data.size  ~= size then
             data = otf.readers.loadshapes(filename,sub,instance)
             if data then
                 data.size   = size
                 data.format = data.format or (kind == "otf" and "opentype") or "truetype"
-                data.time   = time
                 packoutlines(data)
                 containers.write(cache,hash,data)
                 data = containers.read(cache,hash) -- frees old mem
@@ -190,12 +188,11 @@ local function loadoutlines(cache,filename,sub,instance)
     elseif size > 0 and (kind == "pfb") then
         local hash = containers.cleanname(base) -- including suffix
         data = containers.read(cache,hash)
-        if not data or data.time ~= time or data.size  ~= size then
+        if not data or data.size  ~= size then
             data = afm.readers.loadshapes(filename)
             if data then
                 data.size   = size
                 data.format = "type1"
-                data.time   = time
                 packoutlines(data)
                 containers.write(cache,hash,data)
                 data = containers.read(cache,hash) -- frees old mem
@@ -206,7 +203,6 @@ local function loadoutlines(cache,filename,sub,instance)
         data = {
             filename = filename,
             size     = 0,
-            time     = time,
             format   = "unknown",
             units    = 1000,
             glyphs   = { }
@@ -226,12 +222,11 @@ local function loadstreams(cache,filename,sub,instance)
     local kind = lower(file.suffix(filename))
     local attr = lfs.attributes(filename)
     local size = attr and attr.size or 0
-    local time = attr and attr.modification or 0
     local sub  = tonumber(sub)
     if size > 0 and (kind == "otf" or kind == "ttf" or kind == "ttc") then
         local hash = makehash(filename,sub,instance)
         data = containers.read(cache,hash)
-        if not data or data.time ~= time or data.size  ~= size then
+        if not data or data.size  ~= size then
             data = otf.readers.loadshapes(filename,sub,instance,true)
             if data then
                 local glyphs  = data.glyphs
@@ -254,14 +249,13 @@ local function loadstreams(cache,filename,sub,instance)
                 data.glyphs  = nil
                 data.size    = size
                 data.format  = data.format or (kind == "otf" and "opentype") or "truetype"
-                data.time    = time
                 data = cachethem(cache,hash,data)
             end
         end
     elseif size > 0 and (kind == "pfb") then
         local hash = makehash(filename,sub,instance)
         data = containers.read(cache,hash)
-        if not data or data.time ~= time or data.size  ~= size then
+        if not data or data.size  ~= size then
             local names, encoding, streams, metadata = pfb.loadvector(filename,false,true)
             if streams then
                 local fontbbox = metadata.fontbbox or { 0, 0, 0, 0 }
@@ -274,7 +268,6 @@ local function loadstreams(cache,filename,sub,instance)
                 data = {
                     filename   = filename,
                     size       = size,
-                    time       = time,
                     format     = "type1",
                     streams    = streams,
                  -- widths     = widths,
@@ -320,7 +313,6 @@ local function loadstreams(cache,filename,sub,instance)
         data = {
             filename = filename,
             size     = 0,
-            time     = time,
             format   = "unknown",
             streams  = { }
         }
diff --git a/tex/context/base/mkiv/font-syn.lua b/tex/context/base/mkiv/font-syn.lua
index 68fb9eaf..b4c6d38d 100644
--- a/tex/context/base/mkiv/font-syn.lua
+++ b/tex/context/base/mkiv/font-syn.lua
@@ -26,7 +26,7 @@ local formatters, topattern = string.formatters, string.topattern
 local round = math.round
 local P, R, S, C, Cc, Ct, Cs = lpeg.P, lpeg.R, lpeg.S, lpeg.C, lpeg.Cc, lpeg.Ct, lpeg.Cs
 local lpegmatch, lpegpatterns = lpeg.match, lpeg.patterns
-local isfile, modificationtime = lfs.isfile, lfs.modification
+local isfile = lfs.isfile
 
 local allocate             = utilities.storage.allocate
 local sparse               = utilities.storage.sparse
@@ -543,7 +543,7 @@ names.cleanfilename = cleanfilename
 -- end
 
 
-local function check_name(data,result,filename,modification,suffix,subfont)
+local function check_name(data,result,filename,suffix,subfont)
     -- shortcuts
     local specifications = data.specifications
     -- fetch
@@ -637,7 +637,6 @@ local function check_name(data,result,filename,modification,suffix,subfont)
         minsize        = minsize      ~=    0 and minsize      or nil,
         maxsize        = maxsize      ~=    0 and maxsize      or nil,
         designsize     = designsize   ~=    0 and designsize   or nil,
-        modification   = modification ~=    0 and modification or nil,
         instancenames  = instancenames or nil,
     }
 end
@@ -1088,23 +1087,17 @@ local function analyzefiles(olddata)
             end
             -- needs checking with ttc / ttx : date not updated ?
             local result = nil
-            local modification = modificationtime(completename)
-            if olddata and modification and modification > 0 then
+            if olddata then
                 local oldindex = oldindices[storedname] -- index into specifications
                 if oldindex then
                     local oldspecification = oldspecifications[oldindex]
                     if oldspecification and oldspecification.filename == storedname then -- double check for out of sync
-                        local oldmodification = oldspecification.modification
-                        if oldmodification == modification then
-                            result = oldspecification
-                            specifications[#specifications + 1] = result
-                        else
-                            -- ??
-                        end
+                        result = oldspecification
+                        specifications[#specifications + 1] = result
                     else
                          -- ??
                     end
-                elseif oldrejected[storedname] == modification then
+                else
                     result = false
                 end
             end
@@ -1114,10 +1107,10 @@ local function analyzefiles(olddata)
                 if result then
                     if #result > 0 then
                         for r=1,#result do
-                            check_name(data,result[r],storedname,modification,suffix,r) -- subfonts start at zero
+                            check_name(data,result[r],storedname,suffix,r) -- subfonts start at zero
                         end
                     else
-                        check_name(data,result,storedname,modification,suffix)
+                        check_name(data,result,storedname,suffix)
                     end
                     if trace_warnings and message and message ~= "" then
                         report_names("warning when identifying %s font %a, %s",suffix,completename,message)
@@ -1231,7 +1224,7 @@ local function rejectclashes() -- just to be sure, so no explicit afm will be fo
                 if trace_warnings then
                     report_names("fontname %a clashes, %a rejected in favor of %a",f,fnm,fnd)
                 end
-                rejected[f] = s.modification
+                rejected[f] = nil
             else
                 used[f] = fnm
                 o = o + 1
diff --git a/tex/context/base/mkiv/grph-inc.lua b/tex/context/base/mkiv/grph-inc.lua
index 4219726c..ee7c4ce8 100644
--- a/tex/context/base/mkiv/grph-inc.lua
+++ b/tex/context/base/mkiv/grph-inc.lua
@@ -55,7 +55,7 @@ local todimen = string.todimen
 local collapsepath = file.collapsepath
 local formatters = string.formatters
 local odd = math.odd
-local isfile, isdir, modificationtime = lfs.isfile, lfs.isdir, lfs.modification
+local isfile, isdir = lfs.isfile, lfs.isdir
 
 local P, R, S, Cc, C, Cs, Ct, lpegmatch = lpeg.P, lpeg.R, lpeg.S, lpeg.Cc, lpeg.C, lpeg.Cs, lpeg.Ct, lpeg.match
 
@@ -888,17 +888,8 @@ local function register(askedname,specification)
                 local newname = file.join(newpath,newbase)
                 oldname = collapsepath(oldname)
                 newname = collapsepath(newname)
-                local oldtime = modificationtime(oldname) or 0
-                local newtime = modificationtime(newname) or 0
-                if newtime == 0 or oldtime > newtime then
-                    if trace_conversion then
-                        report_inclusion("converting %a (%a) from %a to %a",askedname,oldname,format,newformat)
-                    end
-                    converter(oldname,newname,resolution or "", arguments or "",specification) -- in retrospect a table
-                else
-                    if trace_conversion then
-                        report_inclusion("no need to convert %a (%a) from %a to %a",askedname,oldname,format,newformat)
-                    end
+                if trace_conversion then
+                    report_inclusion("no need to convert %a (%a) from %a to %a",askedname,oldname,format,newformat)
                 end
                 if io.exists(newname) and io.size(newname) > 0 then
                     specification.foundname = oldname
diff --git a/tex/context/base/mkiv/l-file.lua b/tex/context/base/mkiv/l-file.lua
index 70f8188d..e0e50223 100644
--- a/tex/context/base/mkiv/l-file.lua
+++ b/tex/context/base/mkiv/l-file.lua
@@ -95,10 +95,6 @@ function lfs.isfound(name)
     end
 end
 
-function lfs.modification(name)
-    return name and attributes(name,"modification") or nil
-end
-
 if sandbox then
     sandbox.redefine(lfs.isfile,"lfs.isfile")
     sandbox.redefine(lfs.isdir, "lfs.isdir")
diff --git a/tex/context/base/mkiv/l-md5.lua b/tex/context/base/mkiv/l-md5.lua
index 9e3f7672..1912910a 100644
--- a/tex/context/base/mkiv/l-md5.lua
+++ b/tex/context/base/mkiv/l-md5.lua
@@ -20,7 +20,7 @@ end
 
 local md5, file = md5, file
 local gsub = string.gsub
-local modification, isfile, touch = lfs.modification, lfs.isfile, lfs.touch
+local isfile, touch = lfs.isfile, lfs.touch
 local loaddata, savedata = io.loaddata, io.savedata
 
 -- local gsub, format, byte = string.gsub, string.format, string.byte
@@ -60,32 +60,11 @@ end
 local md5HEX = md5.HEX
 
 function file.needsupdating(oldname,newname,threshold) -- size modification access change
-    local oldtime = modification(oldname)
-    if oldtime then
-        local newtime = modification(newname)
-        if not newtime then
-            return true -- no new file, so no updating needed
-        elseif newtime >= oldtime then
-            return false -- new file definitely needs updating
-        elseif oldtime - newtime < (threshold or 1) then
-            return false -- new file is probably still okay
-        else
-            return true -- new file has to be updated
-        end
-    else
-        return false -- no old file, so no updating needed
-    end
+    return false
 end
 
 file.needs_updating = file.needsupdating
 
-function file.syncmtimes(oldname,newname)
-    local oldtime = modification(oldname)
-    if oldtime and isfile(newname) then
-        touch(newname,oldtime,oldtime)
-    end
-end
-
 local function checksum(name)
     if md5 then
         local data = loaddata(name)
diff --git a/tex/context/base/mkiv/meta-fnt.lua b/tex/context/base/mkiv/meta-fnt.lua
index 54c66ceb..cbcc69b6 100644
--- a/tex/context/base/mkiv/meta-fnt.lua
+++ b/tex/context/base/mkiv/meta-fnt.lua
@@ -96,11 +96,10 @@ local function process(mpxformat,name,instances,scalefactor)
         scalefactor = scalefactor or 1
         instances = instances or metapost.fonts.instances or 1 -- maybe store in liost too
         local fontname = file.removesuffix(file.basename(name))
-        local modification = attributes.modification
         local filesize = attributes.size
         local hash = file.robustname(formatters["%s %05i %03i"](fontname,round(scalefactor*1000),instances))
         local lists = containers.read(mpfonts.cache,hash)
-        if not lists or lists.modification ~= modification or lists.filesize ~= filesize or lists.instances ~= instances or lists.scalefactor ~= scalefactor then
+        if not lists or lists.filesize ~= filesize or lists.instances ~= instances or lists.scalefactor ~= scalefactor then
             statistics.starttiming(flusher)
             local data = io.loaddata(filename)
             metapost.reset(mpxformat)
@@ -141,7 +140,6 @@ local function process(mpxformat,name,instances,scalefactor)
                 }
             end
             lists.version = metapost.variables.fontversion or "1.000"
-            lists.modification = modification
             lists.filesize = filesize
             lists.instances = instances
             lists.scalefactor = scalefactor
diff --git a/tex/context/base/mkxl/font-one.lmt b/tex/context/base/mkxl/font-one.lmt
index 9e0a77d6..049005ca 100644
--- a/tex/context/base/mkxl/font-one.lmt
+++ b/tex/context/base/mkxl/font-one.lmt
@@ -84,7 +84,6 @@ function afm.load(filename)
         local data = containers.read(afm.cache,name)
         local attr = lfs.attributes(filename)
         local size = attr and attr.size or 0
-        local time = attr and attr.modification or 0
         --
         local pfbfile = file.replacesuffix(name,"pfb")
         local pfbname = resolvers.findfile(pfbfile,"pfb") or ""
@@ -92,13 +91,11 @@ function afm.load(filename)
             pfbname = resolvers.findfile(file.basename(pfbfile),"pfb") or ""
         end
         local pfbsize = 0
-        local pfbtime = 0
         if pfbname ~= "" then
             local attr = lfs.attributes(pfbname)
             pfbsize = attr.size or 0
-            pfbtime = attr.modification or 0
         end
-        if not data or data.size ~= size or data.time ~= time or data.pfbsize ~= pfbsize or data.pfbtime ~= pfbtime then
+        if not data or data.size ~= size or data.pfbsize ~= pfbsize then
             report_afm("reading %a",filename)
             data = afm.readers.loadfont(filename,pfbname)
             if data then
@@ -109,9 +106,7 @@ function afm.load(filename)
              -- otfreaders.extend(data)
                 otfreaders.pack(data)
                 data.size = size
-                data.time = time
                 data.pfbsize = pfbsize
-                data.pfbtime = pfbtime
                 report_afm("saving %a in cache",name)
              -- data.resources.unicodes = nil -- consistent with otf but here we save not much
                 data = containers.write(afm.cache, name, data)
diff --git a/tex/context/base/mkxl/font-otl.lmt b/tex/context/base/mkxl/font-otl.lmt
index f5b0d48b..d4bef948 100644
--- a/tex/context/base/mkxl/font-otl.lmt
+++ b/tex/context/base/mkxl/font-otl.lmt
@@ -137,7 +137,6 @@ function otf.load(filename,sub,instance)
     local name = file.removesuffix(base) -- already no suffix
     local attr = lfs.attributes(filename)
     local size = attr and attr.size or 0
-    local time = attr and attr.modification or 0
     -- sub can be number of string
     if sub == "" then
         sub = false
@@ -151,7 +150,7 @@ function otf.load(filename,sub,instance)
     end
     hash = containers.cleanname(hash)
     local data = containers.read(otf.cache,hash)
-    local reload = not data or data.size ~= size or data.time ~= time or data.tableversion ~= otfreaders.tableversion
+    local reload = not data or data.size ~= size or data.tableversion ~= otfreaders.tableversion
     if forceload then
         report_otf("forced reload of %a due to hard coded flag",filename)
         reload = true
@@ -181,15 +180,12 @@ end
             if svgshapes then
                 resources.svgshapes = nil
                 if otf.svgenabled then
-                    local timestamp = os.date()
                     -- work in progress ... a bit boring to do
                     containers.write(otf.svgcache,hash, {
                         svgshapes = svgshapes,
-                        timestamp = timestamp,
                     })
                     data.properties.svg = {
                         hash      = hash,
-                        timestamp = timestamp,
                     }
                 end
                 if cleanup > 1 then
@@ -201,15 +197,12 @@ end
             if pngshapes then
                 resources.pngshapes = nil
                 if otf.pngenabled then
-                    local timestamp = os.date()
                     -- work in progress ... a bit boring to do
                     containers.write(otf.pngcache,hash, {
                         pngshapes = pngshapes,
-                        timestamp = timestamp,
                     })
                     data.properties.png = {
                         hash      = hash,
-                        timestamp = timestamp,
                     }
                 end
                 if cleanup > 1 then
@@ -649,14 +642,13 @@ local function checkconversion(specification)
         local name = file.removesuffix(base)
         local attr = lfs.attributes(filename)
         local size = attr and attr.size or 0
-        local time = attr and attr.modification or 0
         if size > 0 then
             local cleanname = containers.cleanname(name)
             local cachename = caches.setfirstwritablefile(cleanname,converter.cachename)
-            if not io.exists(cachename) or (time ~= lfs.attributes(cachename).modification) then
+            if not io.exists(cachename) then
                 report_otf("caching font %a in %a",filename,cachename)
                 converter.action(filename,cachename) -- todo infoonly
-                lfs.touch(cachename,time,time)
+                lfs.touch(cachename,0,0)
             end
             specification.filename = cachename
         end
diff --git a/tex/context/base/mkxl/grph-inc.lmt b/tex/context/base/mkxl/grph-inc.lmt
index 7242b934..fcf8cd03 100644
--- a/tex/context/base/mkxl/grph-inc.lmt
+++ b/tex/context/base/mkxl/grph-inc.lmt
@@ -55,7 +55,7 @@ local todimen = string.todimen
 local collapsepath = file.collapsepath
 local formatters = string.formatters
 local odd = math.odd
-local isfile, isdir, modificationtime = lfs.isfile, lfs.isdir, lfs.modification
+local isfile, isdir = lfs.isfile, lfs.isdir
 local joinfile, is_qualified_path = file.join, file.is_qualified_path
 
 local P, R, S, Cc, C, Cs, Ct, lpegmatch = lpeg.P, lpeg.R, lpeg.S, lpeg.Cc, lpeg.C, lpeg.Cs, lpeg.Ct, lpeg.match
@@ -936,17 +936,8 @@ local function register(askedname,specification)
                 local newname = file.join(newpath,newbase)
                 oldname = collapsepath(oldname)
                 newname = collapsepath(newname)
-                local oldtime = modificationtime(oldname) or 0
-                local newtime = modificationtime(newname) or 0
-                if newtime == 0 or oldtime > newtime then
-                    if trace_conversion then
-                        report_inclusion("converting %a (%a) from %a to %a",askedname,oldname,format,newformat)
-                    end
-                    converter(oldname,newname,resolution or "", arguments or "",specification) -- in retrospect a table
-                else
-                    if trace_conversion then
-                        report_inclusion("no need to convert %a (%a) from %a to %a",askedname,oldname,format,newformat)
-                    end
+                if trace_conversion then
+                    report_inclusion("no need to convert %a (%a) from %a to %a",askedname,oldname,format,newformat)
                 end
                 if io.exists(newname) and io.size(newname) > 0 then
                     specification.foundname = oldname
diff --git a/tex/generic/context/luatex/luatex-fonts-merged.lua b/tex/generic/context/luatex/luatex-fonts-merged.lua
index 5bdd080e..6b56e0bc 100644
--- a/tex/generic/context/luatex/luatex-fonts-merged.lua
+++ b/tex/generic/context/luatex/luatex-fonts-merged.lua
@@ -2661,9 +2661,6 @@ function lfs.isfound(name)
   return (a=="file" or a=="link") and name or nil
  end
 end
-function lfs.modification(name)
- return name and attributes(name,"modification") or nil
-end
 if sandbox then
  sandbox.redefine(lfs.isfile,"lfs.isfile")
  sandbox.redefine(lfs.isdir,"lfs.isdir")
@@ -11514,10 +11511,6 @@ directives.register("fonts.streamreader",function()
   return lower(stripstring(readstring(f,4)))
  end
 end)
-local function readlongdatetime(f)
- local a,b,c,d,e,f,g,h=readbytes(f,8)
- return 0x100000000*d+0x1000000*e+0x10000*f+0x100*g+h
-end
 local tableversion=0.004
 readers.tableversion=tableversion
 local privateoffset=fonts.constructors and fonts.constructors.privateoffset or 0xF0000
@@ -11968,8 +11961,6 @@ readers.head=function(f,fontdata)
    magic=readulong(f),
    flags=readushort(f),
    units=readushort(f),
-   created=readlongdatetime(f),
-   modified=readlongdatetime(f),
    xmin=readshort(f),
    ymin=readshort(f),
    xmax=readshort(f),
@@ -12818,11 +12809,9 @@ local function loadtables(f,specification,offset)
  local tables={}
  local basename=file.basename(specification.filename)
  local filesize=specification.filesize
- local filetime=specification.filetime
  local fontdata={ 
   filename=basename,
   filesize=filesize,
-  filetime=filetime,
   version=readstring(f,4),
   noftables=readushort(f),
   searchrange=readushort(f),
@@ -12992,7 +12981,6 @@ local function loadfontdata(specification)
  local filename=specification.filename
  local fileattr=lfs.attributes(filename)
  local filesize=fileattr and fileattr.size or 0
- local filetime=fileattr and fileattr.modification or 0
  local f=openfile(filename,true) 
  if not f then
   report("unable to open %a",filename)
@@ -13001,7 +12989,6 @@ local function loadfontdata(specification)
   closefile(f)
  else
   specification.filesize=filesize
-  specification.filetime=filetime
   local version=readstring(f,4)
   local fontdata=nil
   if version=="OTTO" or version=="true" or version=="\0\1\0\0" then
@@ -13037,7 +13024,6 @@ local function loadfontdata(specification)
      fontdata={
       filename=filename,
       filesize=filesize,
-      filetime=filetime,
       version=version,
       subfonts=subfonts,
       ttcversion=ttcversion,
@@ -13152,7 +13138,6 @@ function readers.loadfont(filename,n,instance)
    tableversion=tableversion,
    creator="context mkiv",
    size=fontdata.filesize,
-   time=fontdata.filetime,
    glyphs=fontdata.glyphs,
    descriptions=fontdata.descriptions,
    format=fontdata.format,
@@ -21546,7 +21531,6 @@ function otf.load(filename,sub,instance)
  local name=file.removesuffix(base) 
  local attr=lfs.attributes(filename)
  local size=attr and attr.size or 0
- local time=attr and attr.modification or 0
  if sub=="" then
   sub=false
  end
@@ -21559,7 +21543,7 @@ function otf.load(filename,sub,instance)
  end
  hash=containers.cleanname(hash)
  local data=containers.read(otf.cache,hash)
- local reload=not data or data.size~=size or data.time~=time or data.tableversion~=otfreaders.tableversion
+ local reload=not data or data.size~=size or data.tableversion~=otfreaders.tableversion
  if forceload then
   report_otf("forced reload of %a due to hard coded flag",filename)
   reload=true
@@ -21579,14 +21563,11 @@ function otf.load(filename,sub,instance)
    if svgshapes then
     resources.svgshapes=nil
     if otf.svgenabled then
-     local timestamp=os.date()
      containers.write(otf.svgcache,hash,{
       svgshapes=svgshapes,
-      timestamp=timestamp,
      })
      data.properties.svg={
       hash=hash,
-      timestamp=timestamp,
      }
     end
     if cleanup>1 then
@@ -21598,14 +21579,11 @@ function otf.load(filename,sub,instance)
    if pngshapes then
     resources.pngshapes=nil
     if otf.pngenabled then
-     local timestamp=os.date()
      containers.write(otf.pngcache,hash,{
       pngshapes=pngshapes,
-      timestamp=timestamp,
      })
      data.properties.png={
       hash=hash,
-      timestamp=timestamp,
      }
     end
     if cleanup>1 then
@@ -21944,14 +21922,13 @@ local function checkconversion(specification)
   local name=file.removesuffix(base)
   local attr=lfs.attributes(filename)
   local size=attr and attr.size or 0
-  local time=attr and attr.modification or 0
   if size>0 then
    local cleanname=containers.cleanname(name)
    local cachename=caches.setfirstwritablefile(cleanname,converter.cachename)
-   if not io.exists(cachename) or (time~=lfs.attributes(cachename).modification) then
+   if not io.exists(cachename) then
     report_otf("caching font %a in %a",filename,cachename)
     converter.action(filename,cachename) 
-    lfs.touch(cachename,time,time)
+    lfs.touch(cachename,0,0)
    end
    specification.filename=cachename
   end
@@ -35053,19 +35030,17 @@ local function initializesvg(tfmdata,kind,value)
  if value and otf.svgenabled then
   local svg=tfmdata.properties.svg
   local hash=svg and svg.hash
-  local timestamp=svg and svg.timestamp
   if not hash then
    return
   end
   local pdffile=containers.read(otf.pdfcache,hash)
   local pdfshapes=pdffile and pdffile.pdfshapes
-  if not pdfshapes or pdffile.timestamp~=timestamp or not next(pdfshapes) then
+  if not pdfshapes or not next(pdfshapes) then
    local svgfile=containers.read(otf.svgcache,hash)
    local svgshapes=svgfile and svgfile.svgshapes
    pdfshapes=svgshapes and otfsvg.topdf(svgshapes,tfmdata,otf.pdfcache.writable,hash) or {}
    containers.write(otf.pdfcache,hash,{
     pdfshapes=pdfshapes,
-    timestamp=timestamp,
    })
   end
   pdftovirtual(tfmdata,pdfshapes,"svg")
@@ -35139,19 +35114,17 @@ local function initializepng(tfmdata,kind,value)
  if value and otf.pngenabled then
   local png=tfmdata.properties.png
   local hash=png and png.hash
-  local timestamp=png and png.timestamp
   if not hash then
    return
   end
   local pdffile=containers.read(otf.pdfcache,hash)
   local pdfshapes=pdffile and pdffile.pdfshapes
-  if not pdfshapes or pdffile.timestamp~=timestamp then
+  if not pdfshapes then
    local pngfile=containers.read(otf.pngcache,hash)
    local pngshapes=pngfile and pngfile.pngshapes
    pdfshapes=pngshapes and otfpng.topdf(pngshapes) or {}
    containers.write(otf.pdfcache,hash,{
     pdfshapes=pdfshapes,
-    timestamp=timestamp,
    })
   end
   pdftovirtual(tfmdata,pdfshapes,"png")
@@ -35609,20 +35582,17 @@ function afm.load(filename)
   local data=containers.read(afm.cache,name)
   local attr=lfs.attributes(filename)
   local size=attr and attr.size or 0
-  local time=attr and attr.modification or 0
   local pfbfile=file.replacesuffix(name,"pfb")
   local pfbname=resolvers.findfile(pfbfile,"pfb") or ""
   if pfbname=="" then
    pfbname=resolvers.findfile(file.basename(pfbfile),"pfb") or ""
   end
   local pfbsize=0
-  local pfbtime=0
   if pfbname~="" then
    local attr=lfs.attributes(pfbname)
    pfbsize=attr.size or 0
-   pfbtime=attr.modification or 0
   end
-  if not data or data.size~=size or data.time~=time or data.pfbsize~=pfbsize or data.pfbtime~=pfbtime then
+  if not data or data.size~=size or data.pfbsize~=pfbsize then
    report_afm("reading %a",filename)
    data=afm.readers.loadfont(filename,pfbname)
    if data then
@@ -35631,9 +35601,7 @@ function afm.load(filename)
     otfreaders.stripredundant(data)
     otfreaders.pack(data)
     data.size=size
-    data.time=time
     data.pfbsize=pfbsize
-    data.pfbtime=pfbtime
     report_afm("saving %a in cache",name)
     data=containers.write(afm.cache,name,data)
     data=containers.read(afm.cache,name)
@@ -37519,17 +37487,15 @@ local function loadoutlines(cache,filename,sub,instance)
  local kind=file.suffix(filename)
  local attr=lfs.attributes(filename)
  local size=attr and attr.size or 0
- local time=attr and attr.modification or 0
  local sub=tonumber(sub)
  if size>0 and (kind=="otf" or kind=="ttf" or kind=="tcc") then
   local hash=makehash(filename,sub,instance)
   data=containers.read(cache,hash)
-  if not data or data.time~=time or data.size~=size then
+  if not data or data.size~=size then
    data=otf.readers.loadshapes(filename,sub,instance)
    if data then
     data.size=size
     data.format=data.format or (kind=="otf" and "opentype") or "truetype"
-    data.time=time
     packoutlines(data)
     containers.write(cache,hash,data)
     data=containers.read(cache,hash) 
@@ -37539,12 +37505,11 @@ local function loadoutlines(cache,filename,sub,instance)
  elseif size>0 and (kind=="pfb") then
   local hash=containers.cleanname(base) 
   data=containers.read(cache,hash)
-  if not data or data.time~=time or data.size~=size then
+  if not data or data.size~=size then
    data=afm.readers.loadshapes(filename)
    if data then
     data.size=size
     data.format="type1"
-    data.time=time
     packoutlines(data)
     containers.write(cache,hash,data)
     data=containers.read(cache,hash) 
@@ -37555,7 +37520,6 @@ local function loadoutlines(cache,filename,sub,instance)
   data={
    filename=filename,
    size=0,
-   time=time,
    format="unknown",
    units=1000,
    glyphs={}
@@ -37573,12 +37537,11 @@ local function loadstreams(cache,filename,sub,instance)
  local kind=lower(file.suffix(filename))
  local attr=lfs.attributes(filename)
  local size=attr and attr.size or 0
- local time=attr and attr.modification or 0
  local sub=tonumber(sub)
  if size>0 and (kind=="otf" or kind=="ttf" or kind=="ttc") then
   local hash=makehash(filename,sub,instance)
   data=containers.read(cache,hash)
-  if not data or data.time~=time or data.size~=size then
+  if not data or data.size~=size then
    data=otf.readers.loadshapes(filename,sub,instance,true)
    if data then
     local glyphs=data.glyphs
@@ -37597,14 +37560,13 @@ local function loadstreams(cache,filename,sub,instance)
     data.glyphs=nil
     data.size=size
     data.format=data.format or (kind=="otf" and "opentype") or "truetype"
-    data.time=time
     data=cachethem(cache,hash,data)
    end
   end
  elseif size>0 and (kind=="pfb") then
   local hash=makehash(filename,sub,instance)
   data=containers.read(cache,hash)
-  if not data or data.time~=time or data.size~=size then
+  if not data or data.size~=size then
    local names,encoding,streams,metadata=pfb.loadvector(filename,false,true)
    if streams then
     local fontbbox=metadata.fontbbox or { 0,0,0,0 }
@@ -37615,7 +37577,6 @@ local function loadstreams(cache,filename,sub,instance)
     data={
      filename=filename,
      size=size,
-     time=time,
      format="type1",
      streams=streams,
      fontheader={
@@ -37660,7 +37621,6 @@ local function loadstreams(cache,filename,sub,instance)
   data={
    filename=filename,
    size=0,
-   time=time,
    format="unknown",
    streams={}
   }
-- 
2.49.0

